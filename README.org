#+STARTUP: overview
#+TITLE: My dotemacs
My Personal Emacs configs for note-taking workflow, coding, managing daily agenda, composing documents, presentations in latex, managing bibtex files, emails and much much more. 
* [#A] Minimal System Wide Configurations
** Package Manager
    Setup the packages managers 
  #+BEGIN_SRC emacs-lisp :results silent
    (require 'package)
    (package-initialize)

    (add-to-list 'package-archives
	  '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives
	  '("gPalmer Hall nu" . "https://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives
	  '("nongnu" . "https://elpa.nongnu.org/nongnu/"))

    ;; (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

    (setq package-enable-at-startup nil)

    ;; Bootstrap `use-package'
    (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  #+END_SRC 

** Evil Mode
Can't function without vim motion keys. So, Evil mode and evil stuff have to be setup first!.
*** Evil Mode
    Install and enable evil-mode 
   #+BEGIN_SRC emacs-lisp :results silent
     ;; Download Evil
     (unless (package-installed-p 'evil)
       (package-install 'evil))

     ;; Enable Evil
     (require 'evil)
     (evil-mode 1)
   #+END_SRC

*** Undo
Replicate the undo/redo functionality in vim. 
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package undo-tree
	 :ensure t)
     (global-undo-tree-mode)
   #+END_SRC
** Global Visual Line Mode
   #+begin_src emacs-lisp :results silent
     (global-visual-line-mode t)
   #+end_src
** Completion 
*** Ivy for navigation (alternative to helm) + swiper + Counsel
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "%d/%d ")
     (setq ivy-display-style 'fancy))

     (use-package counsel
     :ensure t
     :bind
     (("M-y" . counsel-yank-pop)
	 :map ivy-minibuffer-map
	 ("M-y" . ivy-next-line)))

     (use-package swiper
     :ensure t
     :bind (("C-s" . swiper-isearch)
	     ("C-r" . swiper-isearch)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
     :config
     (progn
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq ivy-display-style 'fancy)
	 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	 ))
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
   #+END_SRC

** Which-key
 #+BEGIN_SRC emacs-lisp
 (use-package which-key
   :config
     (setq which-key-idle-delay 0.3)
     (setq which-key-popup-type 'frame)
     (which-key-mode)
     (which-key-setup-minibuffer)
     (set-face-attribute 'which-key-local-map-description-face nil
	:weight 'bold)
   :ensure t)
 #+END_SRC

 #+RESULTS:
 : t

** WM in emacs
 #+BEGIN_SRC emacs-lisp :results silent
 (use-package eyebrowse
   :diminish eyebrowse-mode
   :config (progn
             (define-key eyebrowse-mode-map (kbd "C-w j") 'eyebrowse-switch-to-window-config-1)
             (define-key eyebrowse-mode-map (kbd "C-w k") 'eyebrowse-switch-to-window-config-2)
             (define-key eyebrowse-mode-map (kbd "C-w l") 'eyebrowse-switch-to-window-config-3)
             (define-key eyebrowse-mode-map (kbd "C-w ;") 'eyebrowse-switch-to-window-config-4)
             (eyebrowse-mode t)
             (setq eyebrowse-new-workspace t)))
 #+END_SRC

** Evil Leader Keybindings
**** Leader
     Install the evil-leader, enable it globally and set the leader key
 #+BEGIN_SRC emacs-lisp :results silent
   (use-package evil-leader
     :ensure t)
   (global-evil-leader-mode)
   (evil-leader/set-leader "<SPC>")
 #+END_SRC
**** Global leader map
     :LOGBOOK:
     CLOCK: [2022-04-02 Sat 22:55]
     :END:
 #+BEGIN_SRC emacs-lisp :results silent
   (evil-leader/set-key
     "<SPC> " 'counsel-M-x
     "fs" 'save-buffer
     "ff" 'counsel-find-file
     "fr" 'ranger
     "fS" 'bookmark-set
     "fj" 'bookmark-jump
     ;; frames
     "Fd" 'delete-frame
     "Fn" 'make-frame
     ;; buffers
     ;; "bb" 'switch-to-buffer
     "bb" 'ivy-switch-buffer
     "bd" 'kill-buffer
     "bp" 'previous-buffer
     "bn" 'next-buffer
     ;; windows
     "wl" 'evil-window-right
     "wL" 'evil-window-move-far-right
     "wh" 'evil-window-left
     "wH" 'evil-window-move-far-left
     "wk" 'evil-window-up
     "wj" 'evil-window-down
     "wd" 'evil-window-delete
     "wv" 'evil-window-vsplit
     "ws" 'evil-window-split
     "wm" 'delete-other-windows

     ;; workspaces
     "lw1" 'eyebrowse-switch-to-window-config-1
     "lw2" 'eyebrowse-switch-to-window-config-2
     "lw3" 'eyebrowse-switch-to-window-config-3
     "lw4" 'eyebrowse-switch-to-window-config-4
     "lw5" 'eyebrowse-switch-to-window-config-5
     "lw6" 'eyebrowse-switch-to-window-config-6
     "lw7" 'eyebrowse-switch-to-window-config-7
     "lw8" 'eyebrowse-switch-to-window-config-8
     "lw9" 'eyebrowse-switch-to-window-config-9

     ;; evil-nerd-commenter
     "ci" 'evilnc-comment-or-uncomment-lines
     "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
     "cc" 'evilnc-copy-and-comment-lines
     "cp" 'evilnc-comment-or-uncomment-paragraphs
     "cr" 'comment-or-uncomment-region
     "cv" 'evilnc-toggle-invert-comment-line-by-line
     "."  'evilnc-copy-and-comment-operator
     ";;" 'evilnc-comment-operator ; if you prefer backslash key

     ;; zoom-in and out
     "=" 'text-scale-increase
     "-" 'text-scale-decrease

     ;; syn layer  keybindings
     ;; "ss" 'synonyms
     ;; "sl" 'synosaurus-lookup
     ;; "sr" 'synosaurus-choose-and-replace
     ;; "si" 'synosaurus-choose-and-insert
     ;; org-recoll keys
     ;; "p" 'projectile-mode-map
     ;"pu" 'org-recoll-update-index
     ;; evil-commentry
     ;; ";" evil-commentry-line		;
     ;; bookmarks 


     ;; emacs quitting
     "qs" 'save-buffers-kill-emacs

     ;; project compilation
     "cfcd" 'ae/compile-dwm

     ;; writeroom keybindings
     "dw" 'olivetti-mode
     "d=" 'olivetti-expand
     "d-" 'olivetti-shrink

     ;; org agenda keybindings


     "gg" 'magit-status

     ;; org roam
     "nl" 'org-roam-buffer-toggle
     "nf" 'org-roam-node-find
     ;; "ng" 'org-roam-show-graph
     ;; "ni" 'org-roam-insert
     "ni" 'org-roam-node-insert
     "ns" 'org-roam-db-sync
     "ngt" 'org-roam-dailies-goto-today
     "ngT" 'org-roam-dailies-goto-tomorrow
     "ngy" 'org-roam-dailies-goto-yesterday
     "ngn" 'org-roam-node-visit
     "ngd" 'org-roam-dailies-find-date
     "nct" 'org-roam-dailies-capture-today
     "ncy" 'org-roam-dailies-capture-yesterday

     ;; org-roam-bibtex
     "na" 'orb-note-actions

     ;; insert commands
     "ir" 'org-ref-insert-link
     "in" 'org-roam-node-insert

     ;; org-agenda
     "aa" 'org-agenda
     "op" 'org-pomodoro
     "t" 'modus-themes-toggle
     )
 #+END_SRC
 
**** bookmarked files 
 #+BEGIN_SRC emacs-lisp

   (evil-leader/set-key
     ;; work files
     "ow1" '(lambda() (interactive) (find-file "~/Dropbox/finalV/first/ijcst.tex"))
     "ow2" '(lambda() (interactive) (find-file "~/Dropbox/second_final/paper.org"))
     "ow3" '(lambda() (interactive) (find-file "~/Dropbox/third/paper.org"))
     "ow4" '(lambda() (interactive) (find-file "~/Dropbox/four/paper.org"))
     ;; "owpp" '(lambda() (interactive) (find-file "~/Dropbox/proposal/myproposal/Proposal and Thesis/lab/uthesis12/paper1.org"))
     "owpp" '(lambda() (interactive) (find-file "~/repos/writings/proposal/paper/second_draft/paper.org"))
     "owps" '(lambda() (interactive) (find-file "~/Dropbox/proposal/presentation/lab/beamer.org"))
     "owc" '(lambda() (interactive) (find-file "~/repos/cv/cv.tex"))
     "owa" '(lambda() (interactive) (find-file
				     "/home/alkhaldieid/Dropbox/LaTex/abstract.tex"))
     "owd" '(lambda() (interactive) (find-file
				     "/home/alkhaldieid/Dropbox/dissertation/dissertation.org"))

     "owlp" '(lambda() (interactive) (find-file "~/Dropbox/LaTex/proposalheader.tex"))
     "owla" '(lambda() (interactive) (find-file "~/Dropbox/LaTex/abstract.tex"))
     "owb1" '(lambda() (interactive) (find-file "~/work/mend/library.bib"))
     "owb2" '(lambda() (interactive) (find-file "~/work/res/cited_lib.bib"))

     "ocv" '(lambda() (interactive) (find-file "~/repos/cv/org/cv.org"))
     "ooo" '(lambda() (interactive) (find-file "~/Dropbox/org/notes/org-mode.org"))
     "ool" '(lambda() (interactive) (find-file "~/repos/shared/layers.org"))
     "oat" '(lambda() (interactive) (find-file "~/repos/org/agenda/TODOs.org"))
     "oam" '(lambda() (interactive) (find-file "~/repos/org/agenda/monthly.org"))
     "oay" '(lambda() (interactive) (find-file "~/repos/org/agenda/yearly.org"))
     "oar" '(lambda() (interactive) (find-file "~/repos/org/agenda/research.org"))

     ;; cf files
     "cfe" '(lambda() (interactive) (find-file "~/.emacs.d/README.org"))
     "cfo" '(lambda() (interactive) (find-file "~/.ihsec/myb/README.org"))
     "cfi" '(lambda() (interactive) (find-file "~/.config/i3/config"))
     "cfa" '(lambda() (interactive) (find-file "~/.config/aliasrc"))
     "cfz" '(lambda() (interactive) (find-file "~/.config/zsh/.zshrc"))
     "cfp" '(lambda() (interactive) (find-file "~/.profile"))
     "cfd" '(lambda() (interactive) (find-file "~/.config/directories"))
     "cfm" '(lambda() (interactive) (find-file "~/.emacs.d/myinit.org"))
     "cfd" '(lambda() (interactive) (find-file "~/.local/src/dwm/config.h"))
     "cfk" '(lambda() (interactive) (find-file "~/.local/src/dwm/config.h"))
     "cfk" '(lambda() (interactive) (find-file "~/.config/kitty/kitty.conf"))

     ;; yasnippet
     "yn"  'yas-new-snippet
     "yf"  'yas-visit-snippet-file

     )
     #+END_SRC

 #+RESULTS:

**** orgmode leader map
 #+BEGIN_SRC emacs-lisp :results silent

   (evil-leader/set-key-for-mode 'org-mode
     "e" 'my/org-set-effort-in-pomodoros
     "s" 'org-toggle-narrow-to-subtree)
   (defun my/org-set-effort-in-pomodoros (n)
     (interactive "nHow many pomodoros: ")
     (let ((mins-per-pomodoro 50))
       (org-set-effort nil (org-duration-from-minutes (* n mins-per-pomodoro)))))
 #+END_SRC
* [#A] Writing Workflow
There are several things that I need in my writing workflow.
** DONE A reliable bibliographies management system. > org-ref
** DONE A reliable note taking system that binds the notes files to the pdfs automatically. > org-roam
** DONE Reliable org-latex-export and \LaTeX settings
** DONE translation and synonyms finding at point
** DONE spell-checking 
** TODO grammar correction
** DONE [#A] Handling bibliographies
*** Org-ref
 Package-Requires: ((org "9.4") (dash "0") (s "0") (f "0") (htmlize "0") (hydra "0") (avy "0") (parsebib "0") (bibtex-completion "0") (citeproc "0"))
installed them through melpa

    1. [X] bibtex-completion
    2. [X] citeproc
    3. dash already installed
    4. parsebib already installed as a dep
    5. [X] htmilze
    6. [X] avy
    7. [X] hydra
    8. [ ] org-ref-ivy
    9. [X] ivy-bibtex
#+begin_src emacs-lisp :results silent       
  (setq bibtex-completion-bibliography '("/home/alkhaldieid/work/res/cited_lib.bib")
	  bibtex-completion-library-path '("~/work/res/pdfs")
	  bibtex-completion-notes-path "~/repos/org/roam/"
	  bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

	  bibtex-completion-notes-template-multiple-files
	  (concat
	  "#+TITLE: ${title}\n"
	  "#+ROAM_KEY: cite:${=key=}\n"
	  ":PROPERTIES:\n"
	  ":Custom_ID: ${=key=}\n"
	  ":AUTHOR: ${author-abbrev}\n"
	  ":JOURNAL: ${journaltitle}\n"
	  ":DATE: ${date}\n"
	  ":YEAR: ${year}\n"
	  ":DOI: ${doi}\n"
	  ":URL: ${url}\n"
	  ":END:\n\n"
	  "* Why am I reading this article?\n"
	  "* Problem Definition\n"
	  "* Proposed Method\n"
	  "* Dataset used\n"
	  "* Key Notes\n")
	  bibtex-completion-additional-search-fields '(keywords)
	  bibtex-completion-display-formats
	  '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	    (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	    (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	  bibtex-completion-pdf-open-function
	  (lambda (fpath)
	    (call-process "open" nil 0 nil fpath)))
  (use-package org-ref
    :ensure t)
  (require 'org-ref-ivy)

  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
	org-ref-insert-cite-function 'org-ref-cite-insert-ivy
	org-ref-insert-label-function 'org-ref-insert-label-link
	org-ref-insert-ref-function 'org-ref-insert-ref-link
	org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))

#+end_src
** DONE [#A] Taking Notes
*** Org-Roam-Mode
#+begin_src emacs-lisp :results silent
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/repos/org/roam"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+end_src
*** org-roam-bibtex
#+BEGIN_SRC emacs-lisp :results silent
  (use-package org-roam-bibtex
    :ensure t)
#+END_SRC
** DONE search notes
#+BEGIN_SRC emacs-lisp :results silent
  (use-package deft
    :ensure t)

  (setq deft-directory "~/repos/org/roam/")
#+END_SRC
** [#A] LaTeX export classes
*** init
    #+begin_src emacs-lisp
      (require 'ox-latex)
      (unless (boundp 'org-latex-classes)
	(setq org-latex-classes nil))
    #+end_src

    #+RESULTS:

*** latex classes
      #+begin_src emacs-lisp :results silent
        (add-to-list 'org-latex-classes
                       '("draft"
                         "\\documentclass[12pt]{report}"
                         ("\\chapter{%s}" . "\\chapter*{%s}")
                         ("\\section{%s}" . "\\section*{%s}")
                         ("\\subsection{%s}" . "\\subsection*{%s}"))
                       '("lukecv"
                         "\documentclass[letterpaper,%twocolumn,10pt]{article}"))

        (add-to-list 'org-latex-classes
                       '("ieeeaccess"
                         "\\documentclass{ieeeaccess}"
                         ("\\chapter{%s}" . "\\chapter*{%s}")
                         ("\\section{%s}" . "\\section*{%s}")
                         ("\\subsection{%s}" . "\\subsection*{%s}")))
      #+end_src
*** LaTex export process
    #+BEGIN_SRC emacs-lisp
      (setq org-latex-pdf-process (list
	 "latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
    #+END_SRC 

    #+RESULTS:
    | latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f |

** [#A] Translation and Synonyms at point
translation, synonyms and other useful tools needed for writing efficiency. 

#+BEGIN_SRC emacs-lisp :results silent
  (use-package mw-thesaurus
    :ensure t)
  (use-package flyspell-correct-ivy
    :ensure t)

  (define-key evil-normal-state-map (kbd "T") 'mw-thesaurus-lookup-at-point)
  ;; (define-key evil-normal-state-map (kbd "t") 'ispell-word)
  (define-key evil-normal-state-map (kbd "t") 'flyspell-correct-at-point)

#+END_SRC 

** flyspell configs
Things I want flyspell to do automatically:
1. enable flyspell mode in every text mode buffer
2. bind a key to go to the next or the previous flyspell error or learn the correct one if they make sense.
#+BEGIN_SRC emacs-lisp :results silent
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC
* [#C] Writing Workflow extras
#+BEGIN_SRC emacs-lisp :results silent
  (use-package olivetti
    :ensure t
    :init
    (olivetti-set-width 120))
#+END_SRC
* [#C] Org extras
** evil-org
   The main desired functionality of the org indent mode is the ability to automatically indent and number the next numbered item in a numbered list when "o" is pressed in the normal mode.
   Evil-org mode enable us to move org-headings with vim keys with the meta key.
   To auto-indent the subheading enable the org-indent-mode.
   #+begin_src emacs-lisp :results silent
     (use-package evil-org
       :ensure t
       :after org
       :config
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+end_src
** org-superstar
#+BEGIN_SRC emacs-lisp :results silent
  (use-package org-superstar
  :ensure t
  :config 
  (add-hook 'org-mode-hook (lambda ()  (org-superstar-mode 1))))
#+END_SRC
** org-agenda
   #+BEGIN_SRC emacs-lisp :results silent
     (setq org-treat-S-cursor-todo-selection-as-state-change nil)

     (setq org-todo-keywords
	   (quote ((sequence "TODO(t)" "NEXT(n)" "In Progress(p)" "|" "DONE(d)" "CANCELLED(c)")
		   (sequence  "PHONE" "MEETING" "EMAIL" "HOLD(h@/!)"))))

     (setq org-todo-keyword-faces
	 (quote (("TODO" :foreground "red" :weight bold)
		 ("NEXT" :foreground "blue" :weight bold)
		 ("In Progress" :foreground "magenta" :weight bold)
		 ("EMAIL" :foreground "red" :weight bold)
		 ("MEETING" :foreground "red" :weight bold)
		 ("PHONE" :foreground "red" :weight bold)
		 ("HOLD" :foreground "blue" :weight bold)
		 ("DONE" :foreground "forest green" :weight bold)
		 ("CANCELLED" :foreground "forest green" :weight bold))))
     (setq org-use-fast-todo-selection t)

     (setq org-treat-S-cursor-todo-selection-as-state-change nil)
   #+END_SRC
** org-mode hooks
   #+BEGIN_SRC emacs-lisp :results silent
     (add-hook 'org-mode-hook 'org-indent-mode)
     (add-hook 'org-mode-hook 'evil-org-mode)
     (add-hook 'org-mode-hook 'olivetti-mode)
   #+END_SRC
* Misc less important comfy stuff
** try
   #+begin_src emacs-lisp
     (use-package try
       :ensure t)
   #+end_src
** yasnippet configs
   Yasnippets make it easy to insert most commenly typed code snippets.
 #+BEGIN_SRC emacs-lisp
 (use-package yasnippet
   :ensure t
   :init
   (yas-global-mode 1))
 #+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp :results silent
  (setq display-line-numbers-type 'relative)
#+END_SRC
** rainbow-mode
#+BEGIN_SRC emacs-lisp :results silent
  (use-package rainbow-mode
    :ensure t)
  (rainbow-mode 1)
#+END_SRC
* Editor Related Configurations
** auto-save and backup files
   To avoid cluttering directories you work on with FILENAME~ files, save your auto-save, backup and undo-tree files in specific directories.
#+BEGIN_SRC emacs-lisp :results silent
    (setq auto-save-file-name-transforms
	  '((".*" "~/.emacs.d/auto-save-list/" t))
	  backup-directory-alist
	  '(("." . "~/.emacs.d/backups/"))
	  undo-tree-history-directory-alist
	  '(("." . "~/.emacs.d/undo-tree/")))
#+END_SRC

** y for yes and n for no
#+BEGIN_SRC emacs-lisp :results silent
(fset 'yes-or-no-p 'y-or-n-p)
(setenv "HOME" "/home/alkhaldieid/")
#+END_SRC
** Follow the symlink without asking
#+BEGIN_SRC emacs-lisp :results silent
(setq vc-follow-symlinks t)
#+END_SRC
** Return Follow Links with RET
#+BEGIN_SRC emacs-lisp :results silent
;; unbind RET first and enable org-return-follow-link
(with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))

(setq org-return-follows-link  t)

#+END_SRC
** Themes and fonts
#+BEGIN_SRC emacs-lisp :results silent
  (load-theme 'modus-vivendi)
  (set-scroll-bar-mode nil)
  (use-package leuven-theme
    :ensure t)
#+END_SRC
** Org-babel
#+BEGIN_SRC emacs-lisp :results silent
  (unless (package-installed-p 'ob-ipython)
    (package-install 'ob-ipython))
  (require 'ob-ipython)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (ipython . t)
     (lisp . t)))
#+END_SRC
* openwith
#+BEGIN_SRC emacs-lisp :results silent
  (use-package openwith :ensure t)

  (openwith-mode t)

  (setq openwith-associations '(("\\.pdf\\'" "evince" (file))
                                ("\\.mp4\\'" "mpv" (file))
                                ("\\.amr\\'" "mpv" (file))
                                ("\\.mkv\\'" "mpv" (file))
                                ("\\.webm\\'" "mpv" (file))
                                ("\\.html\\'" "brave" (file))
                                ("\\.png\\'" "sxiv" (file))
                                ("\\.svg\\'" "sxiv" (file))
                                ))
#+END_SRC

* Version Control
** Magit
#+BEGIN_SRC emacs-lisp :results silent
  (use-package magit
    :ensure t)
#+END_SRC
** Git-gutter 
The purpose of git gutter is to be able to see uncommitted changes made to a git repo. 
I need this feature in order to get used to using magit more often and illuminate the need to sync git repos with bash scripts automatically. 
#+BEGIN_SRC emacs-lisp :results silent
(use-package git-gutter
  :ensure t
  :init
  (global-git-gutter-mode +1))
#+END_SRC
* Completions extra
** Marginalia
  Rich Annotations for candidates. 
  The ivy window in the minubuffer is too small for this to be useful. 
  Needs to increase the window size
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package marginalia
      :ensure t
      :config
      (marginalia-mode))
  #+END_SRC
** Ivy Extension
#+BEGIN_SRC emacs-lisp :results silent
  (use-package ivy-posframe
    :ensure t
    :init
    (ivy-posframe-mode t))
#+END_SRC

* company mode
  #+BEGIN_SRC emacs-lisp :results silent
    (use-package company
      :ensure t)
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0)
  #+END_SRC

** company quick help
#+BEGIN_SRC emacs-lisp :results silent
  (use-package company-quickhelp
    :ensure t)
  (company-quickhelp-mode 1)
#+END_SRC

** company stats
#+BEGIN_SRC emacs-lisp :results silent
  (use-package company-statistics
    :ensure t)
  (add-hook 'after-init-hook 'company-statistics-mode)
#+END_SRC
* Merge Python
Merge the old python configs with the new one gradually.
I need a minimal setup that works. No fancy IDE things are required. Anything that will distract me from getting things done will be omitted. 
The main functionalities I need in the Python section is as follow:
1. auto-completion
2. goto-definition
3. send buffer to an interactive shell
First we need emacs to know where the virtual envs are. We can do that with pyvenv
** pyvenv
#+BEGIN_SRC emacs-lisp :results silent
  (setenv "WORKON_HOME" "/home/alkhaldieid/anaconda3/envs")
  (pyvenv-mode 1)
#+END_SRC
** lsp
The configuration of lsp is found here  https://emacs-lsp.github.io/lsp-mode/page/installation/#vanilla-emacs
#+BEGIN_SRC emacs-lisp :results silent
(use-package lsp-mode
    :hook (python-mode . lsp)
    :commands lsp)
#+END_SRC
** Clear the python inferior output buffer
#+BEGIN_SRC emacs-lisp :results silent
  (defun my-clear ()
    (interactive)
    (let ((comint-buffer-maximum-size 0))
      (comint-truncate-buffer)))
#+END_SRC
** Python mode hooks
#+BEGIN_SRC emacs-lisp :results silent
  (add-hook 'python-mode-hook
            (lambda ()
              (define-key evil-normal-state-local-map
                          (kbd "o") 'evil-org-open-below)
                          (kbd "O") 'evil-org-open-above))
  (add-hook 'python-mode-hook 'display-line-numbers-mode)
  (add-hook 'python-mode-hook 'olivetti-mode)

#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp :results silent
  (use-package projectile
    :ensure t)
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
#+END_SRC
* Useful funcs
** Bionic Reading
source http://xahlee.info/emacs/emacs/elisp_bionic_reading.html
#+BEGIN_SRC emacs-lisp :results silent
(defvar infu-bionic-reading-face nil "a face for `infu-bionic-reading-region'.")

(setq infu-bionic-reading-face 'bold)
;; try
;; 'bold
;; 'error
;; 'warning
;; 'highlight
;; or any value of M-x list-faces-display

(defun infu-bionic-reading-buffer ()
  "Bold the first few chars of every word in current buffer.
Version 2022-05-21"
  (interactive)
  (infu-bionic-reading-region (point-min) (point-max)))

(defun infu-bionic-reading-region (Begin End)
  "Bold the first few chars of every word in region.
Version 2022-05-21"
  (interactive "r")
  (let (xBounds xWordBegin xWordEnd  )
    (save-restriction
      (narrow-to-region Begin End)
      (goto-char (point-min))
      (while (forward-word)
        ;; bold the first half of the word to the left of cursor
        (setq xBounds (bounds-of-thing-at-point 'word))
        (setq xWordBegin (car xBounds))
        (setq xWordEnd (cdr xBounds))
        (setq xBoldEndPos (+ xWordBegin (1+ (/ (- xWordEnd xWordBegin) 2))))
        (put-text-property xWordBegin xBoldEndPos
                           'font-lock-face infu-bionic-reading-face)))))
#+END_SRC
